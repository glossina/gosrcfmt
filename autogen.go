package gosrcfmt

import (
	"bytes"
	"fmt"
	"go/parser"
	"go/token"
	"io"
	"io/ioutil"
	"os"
	"strings"
)

const (
	header = `// Code generated by %s. DO NOT EDIT.`
)

// Autogen форматирование для автоматически генерированного кода
func Autogen(data []byte) ([]byte, error) {
	var buf bytes.Buffer
	buf.WriteString(fmt.Sprintf(header, strings.Join(os.Args, " ")))
	buf.WriteString("\n\n")
	buf.Write(data)

	fset := token.NewFileSet()
	file, err := parser.ParseFile(fset, "", buf.Bytes(), parser.AllErrors|parser.ParseComments)
	if err != nil {
		return nil, &wrapError{
			msg: "parse input data",
			err: err,
		}
	}

	res, err := AST(fset, file)
	if err != nil {
		return nil, &wrapError{
			msg: "print AST",
			err: err,
		}
	}

	return res, nil
}

// Format formats data from src as a go code with gofmt utility
// Deprecated
func Format(dest io.Writer, data []byte) {
	res, err := Autogen(data)
	if err != nil {
		panic(err)
	}
	if _, err = dest.Write(res); err != nil {
		panic(err)
	}
}

// FormatReader formats data from src as a go code with gofmt utility
// Deprecated
func FormatReader(dest io.Writer, src io.Reader) {
	data, err := ioutil.ReadAll(src)
	if err != nil {
		panic(err)
	}
	Format(dest, data)
}
